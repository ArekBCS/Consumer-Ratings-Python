import requests
import time
import base64
import json
from datetime import datetime, timedelta
import domojupyter as domo
import pandas as pd

client_key = "p3tew145y3tag41n"
client_secret = "3cLvOjGL"

def format_date_to_iso(date, start_of_day):
    """Format date to ISO-8601 format (YYYY-MM-DDTHH:MM:SSZ)"""
    year = date.year
    month = str(date.month).zfill(2)
    day = str(date.day).zfill(2)
    hours, minutes, seconds = ('00', '00', '00') if start_of_day else ('23', '59', '59')
    return f"{year}-{month}-{day}T{hours}:{minutes}:{seconds}Z"

def api_request(url, data, client_key, client_secret, retries=10):
    credentials = base64.b64encode(f"{client_key}:{client_secret}".encode()).decode()
    headers = {
        "Authorization": f"Basic {credentials}",
        "Content-Type": "application/json"
    }

    attempt = 0
    while attempt < retries:
        response = requests.post(url, headers=headers, data=json.dumps(data))

        if response.status_code == 200:
            try:
                return response.json()  # Return parsed JSON response
            except json.JSONDecodeError:
                print(f"Failed to parse JSON response: {response.text}")
                break
        elif response.status_code == 401:
            attempt += 1
            time.sleep(10)  # Wait before retrying
        else:
            print(f"API request failed with status {response.status_code}: {response.text}")
            break
    return None

def CommissionReport(client_key, client_secret):
    """Fetch commission report"""
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=60)

    data = {
        "date_time_ranges": [{"start": format_date_to_iso(start_date, True), "end": format_date_to_iso(end_date, False)}],
        "scope": {"partner": "1011l284098"},
        "timezone": "America/Regina",
        "metrics": ["total_conversions", "total_conversion_items", "total_partner_commission", "total_order_value"],
        "group_by": ["date_time"]
    }

    url = "https://api.partnerize.com/v3/partner/analytics/conversions/explode"
    return api_request(url, data, client_key, client_secret)

def ClicksReport(client_key, client_secret):
    """Fetch clicks report"""
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=120)

    data = {
        "date_time_ranges": [{"start": format_date_to_iso(start_date, True), "end": format_date_to_iso(end_date, False)}],
        "scope": {"partner": "1011l284098"},
        "timezone": "America/Regina",
        "metrics": ["total_clicks", "total_clicks_converted", "total_unique_clicks"],
        "group_by": ["date_time", "publisher_reference"],
        "interval": {"field": "date_time", "period": "PT1M"}
    }

    url = "https://api.partnerize.com/v3/partner/analytics/clicks/explode"
    return api_request(url, data, client_key, client_secret)

commission_data = CommissionReport(client_key, client_secret)
clicks_data = ClicksReport(client_key, client_secret)

#print("Commission Report:", commission_data["data"])
#print("Clicks Report:", clicks_data["data"])

# Convert JSON API response to DataFrame
if commission_data and "data" in commission_data:
    commission_df = pd.DataFrame(commission_data["data"])
    domo.write_dataframe(commission_df, 'PROD_JUP_PARTNERIZE_COMMISSIONS')
else:
    print("Error: Commission data is missing or empty.")

if clicks_data and "data" in clicks_data:
    clicks_df = pd.DataFrame(clicks_data["data"])
    domo.write_dataframe(clicks_df, 'PROD_JUP_PARTNERIZE_CLICKS')
else:
    print("Error: Clicks data is missing or empty.")
