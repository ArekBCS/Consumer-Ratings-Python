import requests
import base64
import json
import pandas as pd
from datetime import datetime, timedelta
import time
import domojupyter as domo

# Rakuten metadata
metadata = {
    'account': {
        'clientKey': 'DSlxgrPr422vTOZ5TZA4s0DiC0hA0MiD',
        'clientSecret': 'IsNJvzE0ZtF4rQ2aRhzwgkVpUV4cUBDJ'
    }
}

# Function to encode the client key and secret to Base64 (for Rakuten)
def encode_base64(client_key, client_secret):
    credentials = f"{client_key}:{client_secret}"
    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
    return encoded_credentials

# Function to build URL parameters (for Rakuten)
def build_params(params):
    query_string = '&'.join(f"{key}={requests.utils.quote(value)}" for key, value in params.items())
    return query_string

# Function to handle Rakuten transactions
def get_rakuten_data():
    print("Started get_rakuten_data.")
    # Initialize an empty DataFrame to store the Rakuten data
    df_rakuten = pd.DataFrame()

    # Step 1: Encode credentials for Rakuten
    credentials = encode_base64(metadata['account']['clientKey'], metadata['account']['clientSecret'])
    
    # Set headers for the first POST request to Rakuten
    headers = {
        'Authorization': f'Bearer {credentials}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    # Step 2: Prepare the body parameters for the POST request
    body = build_params({
        'grant_type': 'password',
        'scope': '4035463'
    })
    
    # Step 3: Make the first POST request to get the access token from Rakuten
    token_url = 'https://api.linksynergy.com/token'
    response = requests.post(token_url, data=body, headers=headers)
    
    # Wait for 40 seconds (as in your original JavaScript code)
    time.sleep(40)
    
    # Step 4: Get the access token from the response
    token_data = response.json()
    access_token = token_data.get('access_token')
    
    # Step 5: Set headers for the second API call to retrieve transactions from Rakuten
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    # Calculate dates
    end_date = datetime.now() - timedelta(days=1)  # Yesterday
    start_date = end_date - timedelta(days=30)  # 30 days before yesterday
    
    # Convert dates to strings
    end_date_str = end_date.strftime('%Y-%m-%d %H:%M:%S')
    start_date_str = start_date.strftime('%Y-%m-%d %H:%M:%S')
    
    # Step 6: Add the 'limit' parameter and make the GET request for transactions
    params = {
        'limit': 6000,
        'transaction_date_start': start_date,
        'transaction_date_end': end_date
    }
    
    transactions_url = 'https://api.linksynergy.com/events/1.0/transactions'
    response_merch = requests.get(transactions_url, headers=headers, params=params)
    
    if response_merch.status_code == 200:
        # Parse the response JSON (assuming it's a list of transactions)
        json_result_merch = response_merch.json()

        # Convert the JSON data to a DataFrame (without renaming columns)
        df_rakuten = pd.json_normalize(json_result_merch)

        # Filter to keep rows where 'is_event' is 'N'
        df_rakuten = df_rakuten[df_rakuten['is_event'] == 'N']
        
        # Keep the 'transaction_date' column as is (no renaming)
        # df_rakuten['transaction_date'] = pd.to_datetime(df_rakuten['transaction_date'], format='%Y-%m-%d %H:%M:%S', errors='coerce', utc=True)
        df_rakuten['platform'] = 'Rakuten'
        df_rakuten['report'] = 'transactions'
        
        print("Finished get_rakuten_data.")
        return df_rakuten
    else:
        print(f"Failed to retrieve transactions. Status code: {response_merch.status_code}")
        return pd.DataFrame()  # Return an empty DataFrame if request fails

# Now you can call the functions you need to execute
rakuten_data = get_rakuten_data()

# Combine all data into one DataFrame
final_data = pd.concat([rakuten_data], ignore_index=True)
display(final_data)

#display(final_data)
try:
    domo.write_dataframe(final_data, 'PROD_JUP_CR_RAKUTEN')
    print("Combined data successfully written to Domo.")
except Exception as e:
    print(f"Error writing combined data to Domo: {e}")
