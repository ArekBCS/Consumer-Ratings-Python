import requests
import base64
import json
import pandas as pd
from datetime import datetime, timedelta
import time
import domojupyter as domo

# Function to encode the client key and secret to Base64 (for Rakuten)
def encode_base64(client_key, client_secret):
    credentials = f"{client_key}:{client_secret}"
    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
    return encoded_credentials

# Function to build URL parameters (for Rakuten)
def build_params(params):
    query_string = '&'.join(f"{key}={requests.utils.quote(value)}" for key, value in params.items())
    return query_string

def get_cake_conversions_data():
    print('Started get_cake_conversions_data')
    
    # Initialize an empty DataFrame to store Cake Conversions data
    df_cake_conversions = pd.DataFrame()
    
    end_date = datetime.now().strftime('%m-%d-%Y')
    start_date = (datetime.now() - timedelta(days=30)).strftime('%m-%d-%Y')

    # Define the platforms and their respective API keys, affiliate ids, and URLs
    platforms = [
        ('Cake - BrandX', 'tRN2zw2xOwkLbU88jpaYoA', 573, 'https://track.brandxads.com/affiliates/api/Reports/Conversions'),
        ('Cake - Consumer Rating', 'gJJNQYtnXjJXi9Fw9ZGAxA', 3, 'https://crwebtracking.com/affiliates/api/Reports/Conversions'),
        ('Cake - Thinx', 'Vv8iFZRBFUE7gsWw8SVCQ', 9, 'https://login.thinxmg.com/affiliates/api/Reports/Conversions'),
        ('Cake - Dog Food Rankings', 'APbqDVRqAgRggstUiLlA', 621, 'https://track.brandxads.com/affiliates/api/Reports/Conversions'),
        ('Cake - Mattress Authority', 'ePNef0Asv0Nxxy5EcJw', 616, 'https://track.brandxads.com/affiliates/api/Reports/Conversions'),
        ('Cake - Top Weight Loss', 'XA1okf0lh5js7Ii0DEoniw', 619, 'https://track.brandxads.com/affiliates/api/Reports/Conversions')
    ]

    # Loop through each platform and make the API calls
    for platform_name, api_key, affiliate_id, url in platforms:
        params = {
            'api_key': api_key,
            'affiliate_id': affiliate_id,
            'start_date': start_date,
            'end_date': end_date
        }

        # Make the GET request to the Cake API for Conversions data
        response = requests.get(url, params=params)

        if response.status_code == 200:
            data = response.json().get('data', [])
            
            # Temporary list to collect rows of data for Cake Conversions
            platform_rows = []

            # Iterate over the data and format it into rows
            for details in data:
                row = {
                    'platform': platform_name,
                    'report': 'conversions'
                }

                # For each key-value pair in the details, add them to the row
                for key, value in details.items():
                    row[key] = value  # Dynamically add column names based on the keys

                # Append the row to the list
                platform_rows.append(row)

            # Convert the list of rows into a DataFrame and concatenate with the main DataFrame
            platform_df = pd.DataFrame(platform_rows)
            df_cake_conversions = pd.concat([df_cake_conversions, platform_df], ignore_index=True)
        else:
            print(f"Error: Received status code {response.status_code} from {platform_name}")

    print('Finished get_cake_conversions_data')
    return df_cake_conversions

cake_conversions_data = get_cake_conversions_data()

display(cake_conversions_data)

try:
    domo.write_dataframe(cake_conversions_data, 'PROD_JUP_CAKE_CONVERSIONS')
    print("Combined data successfully written to Domo.")
except Exception as e:
    print(f"Error writing combined data to Domo: {e}")
