import requests
import time
import base64
import json
from datetime import datetime, timedelta, timezone
import domojupyter as domo
import pandas as pd

api_key = "b4sqVxrAdTfHeB8Xwzis1JFNFW25oKVzINeMmGaZZ8IAVi6IZu"

def format_date_to_iso(date, start_of_day):
    """Format date to ISO-8601 format (YYYY-MM-DDTHH:MM:SSZ)"""
    year = date.year
    month = str(date.month).zfill(2)
    day = str(date.day).zfill(2)
    hours, minutes, seconds = ('00', '00', '00') if start_of_day else ('23', '59', '59')
    return f"{year}-{month}-{day}T{hours}:{minutes}:{seconds}Z"

def fetch_reports(api_key):
    """Fetch reports from Levanta API"""
    end_date = datetime.now(timezone.utc)
    start_date = end_date - timedelta(days=90)
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    params = {
        "limit": 250,
        "start": format_date_to_iso(start_date, True),
        "end": format_date_to_iso(end_date, False)
    }
    
    url = "https://app.levanta.io/api/creator/v1/reports"
    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code == 200:
        try:
            data = response.json()
            #display(data)
            reports = data.get("reports", [])  # Extract the reports list
            return pd.DataFrame(reports) if reports else None
        except Exception as e:
            print(f"JSON parsing error: {e}")
            print("Raw response:", response.text)
            return None
    else:
        print(f"API request failed: {response.status_code} - {response.text}")
        return None

reports_df = fetch_reports(api_key)

if reports_df is not None:
    # Expand nested columns
    invoice_df = pd.json_normalize(reports_df['invoice'])
    link_df = pd.json_normalize(reports_df['link'])

    # Rename columns to avoid conflicts
    invoice_df.columns = [f"invoice_{col}" for col in invoice_df.columns]
    link_df.columns = [f"link_{col}" for col in link_df.columns]

    # Merge back to original dataframe
    reports_df = reports_df.drop(columns=['invoice', 'link'])  # Remove nested columns
    reports_df = pd.concat([reports_df, invoice_df, link_df], axis=1)
    reports_df = reports_df.drop(columns=['link_active', 'final'], errors='ignore')
    
    #pd.set_option('display.max_columns', None)
    #display(reports_df)
    domo.write_dataframe(reports_df, "PROD_JUP_LEVANTA_REPORTS")
    print("Data updated successfully.")
else:
    print("No data retrieved.")
